// <auto-generated />
using System;
using ChillGames.Data.StoreContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ChillGames.Data.Migrations
{
    [DbContext(typeof(StoreDbContext))]
    [Migration("20211118155432_CreateDatabase")]
    partial class CreateDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ChillGames.Models.Entities.Games.EntityGame", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<long?>("EntityUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Genre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Launchers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Platforms")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Price")
                        .HasColumnType("int");

                    b.Property<string>("Publisher")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EntityUserId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("ChillGames.Models.Entities.Images.EntityGameImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("EntityGameId")
                        .HasColumnType("bigint");

                    b.Property<string>("ImageCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPreview")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EntityGameId");

                    b.ToTable("GamesImages");
                });

            modelBuilder.Entity("ChillGames.Models.Entities.Images.EntityUserImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("EntityUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("ImageCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EntityUserId")
                        .IsUnique();

                    b.ToTable("UserImages");
                });

            modelBuilder.Entity("ChillGames.Models.Entities.Orders.EntityOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<long?>("EntityUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EntityUserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ChillGames.Models.Entities.Orders.EntityOrderPosition", b =>
                {
                    b.Property<long>("EntityGameId")
                        .HasColumnType("bigint");

                    b.Property<long>("EntityOrderId")
                        .HasColumnType("bigint");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("EntityGameId", "EntityOrderId");

                    b.HasIndex("EntityOrderId");

                    b.ToTable("OrderPositions");
                });

            modelBuilder.Entity("ChillGames.Models.Entities.Tags.EntityTag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("ChillGames.Models.Entities.Translations.EntityTranslation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TranslationType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Translations");
                });

            modelBuilder.Entity("ChillGames.Models.Entities.Users.EntityUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EntityGameEntityTag", b =>
                {
                    b.Property<long>("GamesId")
                        .HasColumnType("bigint");

                    b.Property<long>("TagsId")
                        .HasColumnType("bigint");

                    b.HasKey("GamesId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("Tagging");
                });

            modelBuilder.Entity("EntityGameEntityTranslation", b =>
                {
                    b.Property<long>("GamesId")
                        .HasColumnType("bigint");

                    b.Property<long>("TranslationsId")
                        .HasColumnType("bigint");

                    b.HasKey("GamesId", "TranslationsId");

                    b.HasIndex("TranslationsId");

                    b.ToTable("GamesTranslations");
                });

            modelBuilder.Entity("ChillGames.Models.Entities.Games.EntityGame", b =>
                {
                    b.HasOne("ChillGames.Models.Entities.Users.EntityUser", null)
                        .WithMany("WishList")
                        .HasForeignKey("EntityUserId");
                });

            modelBuilder.Entity("ChillGames.Models.Entities.Images.EntityGameImage", b =>
                {
                    b.HasOne("ChillGames.Models.Entities.Games.EntityGame", "Game")
                        .WithMany("GameImages")
                        .HasForeignKey("EntityGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("ChillGames.Models.Entities.Images.EntityUserImage", b =>
                {
                    b.HasOne("ChillGames.Models.Entities.Users.EntityUser", "User")
                        .WithOne("UserImage")
                        .HasForeignKey("ChillGames.Models.Entities.Images.EntityUserImage", "EntityUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ChillGames.Models.Entities.Orders.EntityOrder", b =>
                {
                    b.HasOne("ChillGames.Models.Entities.Users.EntityUser", null)
                        .WithMany("Orders")
                        .HasForeignKey("EntityUserId");
                });

            modelBuilder.Entity("ChillGames.Models.Entities.Orders.EntityOrderPosition", b =>
                {
                    b.HasOne("ChillGames.Models.Entities.Games.EntityGame", "Game")
                        .WithMany("OrderPositions")
                        .HasForeignKey("EntityGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChillGames.Models.Entities.Orders.EntityOrder", "Order")
                        .WithMany("OrderPositions")
                        .HasForeignKey("EntityOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("EntityGameEntityTag", b =>
                {
                    b.HasOne("ChillGames.Models.Entities.Games.EntityGame", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChillGames.Models.Entities.Tags.EntityTag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EntityGameEntityTranslation", b =>
                {
                    b.HasOne("ChillGames.Models.Entities.Games.EntityGame", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChillGames.Models.Entities.Translations.EntityTranslation", null)
                        .WithMany()
                        .HasForeignKey("TranslationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChillGames.Models.Entities.Games.EntityGame", b =>
                {
                    b.Navigation("GameImages");

                    b.Navigation("OrderPositions");
                });

            modelBuilder.Entity("ChillGames.Models.Entities.Orders.EntityOrder", b =>
                {
                    b.Navigation("OrderPositions");
                });

            modelBuilder.Entity("ChillGames.Models.Entities.Users.EntityUser", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("UserImage");

                    b.Navigation("WishList");
                });
#pragma warning restore 612, 618
        }
    }
}
